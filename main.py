import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

from bitrix24_API import create_contact_in_bitrix, get_contact_id_by_phone, create_deal_in_bitrix, \
    update_deal_in_bitrix, get_deal_id_by_contact, send_chat_to_bitrix, chat_history
from config import TOKEN_TG, Config
from db.db import DB
from db.storage import UserStorage
from db.storage import Survey, SurveyResponses
from gpt_4 import ask_gpt

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.WARNING)

bot = Bot(token=TOKEN_TG)
dp = Dispatcher()
router = Router()

dp.include_router(router)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
database = DB(
    host=Config.DB_HOST,
    port=Config.DB_PORT,
    login=Config.DB_LOGIN,
    password=Config.DB_PASSWORD,
    database=Config.DB_DATABASE,
)

user_storage = UserStorage(database)
survey_responses = SurveyResponses(database)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ {chat_id: [—Å–æ–æ–±—â–µ–Ω–∏—è]}
user_id = None
user_name = None
text = None


@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    text = message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, text)

    reply = await message.answer(
        """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Amatto!\n\n–ú—ã ‚Äì –∫–æ–º–ø–∞–Ω–∏—è Amatto, –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π —Å—Ç–∏–ª—å–Ω–æ–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏ –¥–ª—è –¥–æ–º–∞, –∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –ú–æ–ª–¥–æ–≤–µ.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—É—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ –≤–∫—É—Å–æ–º –∏–ª–∏ –Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ ‚Äì –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! """)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè¢ –ö–æ–º–ø–∞–Ω–∏—è", callback_data="category_company")],
        [InlineKeyboardButton(text="üë§ –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ", callback_data="category_individual")]
    ])

    reply = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)


@router.callback_query(lambda c: c.data.startswith("category_"))
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    category = "–ö–æ–º–ø–∞–Ω–∏—è" if callback.data == "category_company" else "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ"
    chat_id = callback.message.chat.id
    user_name = callback.message.from_user
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(chat_id, user_name, category)

    if await user_storage.get_by_id(chat_id):
        await user_storage._db.execute(
            "UPDATE users SET category = $1 WHERE user_id = $2", category, callback.from_user.id
        )
    else:
        await user_storage.create(chat_id, callback.from_user.username, callback.from_user.first_name, category)

    reply = await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category}\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(chat_id, "–ë–æ—Ç", reply)

    await state.set_state(Survey.name)
    await callback.answer()


@router.message(Survey.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    reply = await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)
    await state.set_state(Survey.phone)


@router.message(Survey.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    reply = await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)

    await state.set_state(Survey.address)


@router.message(Survey.address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    reply = await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π email:")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)
    await state.set_state(Survey.email)


@router.message(Survey.email)
async def process_private_person(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    user = await user_storage.get_by_id(message.chat.id)
    if user.category == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ":
        await state.update_data(category="–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ")

        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–ì–æ—Å—Ç–∏–Ω–∞—è"), KeyboardButton(text="–°–ø–∞–ª—å–Ω—è")],
            [KeyboardButton(text="–ö—É—Ö–Ω—è"), KeyboardButton(text="–û—Ñ–∏—Å–Ω–∞—è")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
        ], resize_keyboard=True)

        reply = await message.answer("–ö–∞–∫—É—é –º–µ–±–µ–ª—å –≤—ã –∏—â–µ—Ç–µ?", reply_markup=keyboard)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        await save_message(user_id, "–ë–æ—Ç", reply)

        await state.set_state(Survey.furniture_type)
    else:
        await state.update_data(category="–ö–æ–º–ø–∞–Ω–∏—è")

        reply = await message.answer("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        await save_message(user_id, "–ë–æ—Ç", reply)

        await state.set_state(Survey.company_name)


@router.message(Survey.furniture_type)
async def process_furniture(message: types.Message, state: FSMContext):
    await state.update_data(furniture_type=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
    ], resize_keyboard=True)

    reply = await message.answer("–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–∏ –≤–∞—Å –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞?", reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)
    await state.set_state(Survey.design_interest)


@router.message(Survey.design_interest)
async def process_design(message: types.Message, state: FSMContext):
    await state.update_data(design_interest=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="500‚Ç¨"), KeyboardButton(text="1000‚Ç¨")],
        [KeyboardButton(text="3000‚Ç¨"), KeyboardButton(text="5000‚Ç¨")]
    ], resize_keyboard=True)

    reply = await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?", reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)
    await state.set_state(Survey.budget)


@router.message(Survey.budget)
async def process_budget(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
    ], resize_keyboard=True)

    reply = await message.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–±–æ—Ä–∫–∞?", reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)

    await state.set_state(Survey.delivery)


@router.message(Survey.company_name)
async def process_company_name(message: types.Message, state: FSMContext):
    await state.update_data(company_name=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞"), KeyboardButton(text="–ù–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ")]
    ], resize_keyboard=True)

    reply = await message.answer("–í—ã –∑–∞–∫—É–ø–∞–µ—Ç–µ –º–µ–±–µ–ª—å —Ä–∞–∑–æ–≤–æ –∏–ª–∏ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ?", reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)

    await state.set_state(Survey.delivery)


@router.message(Survey.delivery)
async def finish_survey(message: types.Message, state: FSMContext):
    await state.update_data(delivery=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    data = await state.get_data()
    data["user_id"] = message.from_user.id

    get_user = await survey_responses.get_user_by_id(message.chat.id)
    if not get_user:
        await survey_responses.save_survey(data)
    else:
        await survey_responses.update_survey(message.chat.id, data)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager"),
            InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="go_to_payment"),
            InlineKeyboardButton(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="extra_question")
        ]
    ])

    reply = await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! üìû\n"
                                 "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã —Å–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ))",
                                 reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "–ë–æ—Ç", reply)
    user_crm_id = await get_contact_id_by_phone(data["phone"])

    if not user_crm_id:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É
        deal_in_bitrix = await create_contact_in_bitrix(data["name"], data["phone"], None, data["address"])
        if deal_in_bitrix:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
            budget_value = int("".join(filter(str.isdigit, data["budget"])))
            await create_deal_in_bitrix("–°–¥–µ–ª–∫–∞ —Å " + data["name"], deal_in_bitrix, budget_value)
    else:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —Å–¥–µ–ª–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        deal_id_bitrix = await get_deal_id_by_contact(user_crm_id)
        if deal_id_bitrix:
            # –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            await update_deal_in_bitrix("–°–¥–µ–ª–∫–∞ —Å " + data["name"], deal_id_bitrix, data["budget"])
        else:
            # –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
            budget_value = int("".join(filter(str.isdigit, data["budget"])))
            await create_deal_in_bitrix("–°–¥–µ–ª–∫–∞ —Å " + data["name"], user_crm_id, budget_value)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    last_activity[user_id] = datetime.now()

    await state.clear()


@router.callback_query(lambda c: c.data == "contact_manager")
async def contact_manager_callback(callback: types.CallbackQuery):
    await callback.message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!")


@router.callback_query(lambda c: c.data == "go_to_payment")
async def go_to_payment_callback(callback: types.CallbackQuery):
    await callback.message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: https://example.com/payment")


@router.callback_query(lambda c: c.data == "extra_question")
async def extra_question_callback(callback: types.CallbackQuery):
    await callback.message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?")


@router.message()
async def chat_gpt(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    last_activity[user_id] = datetime.now()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, user_name, message.text)

    data_user = await survey_responses.get_by_id(message.chat.id)
    print("data_user", data_user)

    ai_response = await ask_gpt(message, data_user)
    await message.answer(ai_response)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, "AI", ai_response)


# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
async def save_message(user_id, user, text):
    if user_id not in chat_history:
        chat_history[user_id] = []

    chat_history[user_id].append(f"{user}: {text}")


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id: timestamp}
last_activity = {}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (2 –º–∏–Ω—É—Ç—ã)
AUTO_SAVE_DELAY = 120


async def check_user_activity():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_crm_id = await get_contact_id_by_phone("+37367107269")
    deal_id = await get_deal_id_by_contact(user_crm_id)

    while True:
        now = datetime.now()
        inactive_users = []

        for user_id, last_time in last_activity.items():
            if now - last_time > timedelta(seconds=AUTO_SAVE_DELAY):
                inactive_users.append(user_id)

        for user_id in inactive_users:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ Bitrix24
            if deal_id:
                send_chat_to_bitrix(user_id, deal_id)

            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if user_id in chat_history:
                chat_history[user_id] = []
                del last_activity[user_id]

            print(f"üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É


async def main():
    await database.create_pool()

    try:
        await user_storage.init()
        await survey_responses.init()
        asyncio.create_task(check_user_activity())
        await dp.start_polling(bot, skip_updates=False)
    finally:
        await database.close_pool()


if __name__ == "__main__":
    asyncio.run(main())
